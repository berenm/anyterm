import path ;

lib boost_thread : : <search>/usr/local/lib ;
lib boost_program_options : : <search>/usr/local/lib ;
lib boost_filesystem : : <search>/usr/local/lib ;
lib boost_regex : : <search>/usr/local/lib ;
lib boost_iostreams : : <search>/usr/local/lib ;
lib boost_date_time : : <search>/usr/local/lib ;
lib boost_system : : <search>/usr/local/lib ;
lib boost_serialization : : <search>/usr/local/lib ;
lib boost_log : : <search>/usr/local/lib ;
lib util ;
lib vte ;

project anyterm : requirements
  <include>include/
  <include>libpbe/include/
  <include>ext/cgi-0.7.1/
  <include>/usr/include/glib-2.0
  <include>/usr/lib/glib-2.0/include
  <library>boost_system
  <library>boost_filesystem
  <library>boost_serialization
  <library>boost_thread
  <library>boost_iostreams
  <library>util
  <library>vte
  <link>static
  <threading>multi
  <cflags>-std=c++0x
  <cflags>"`pkg-config --cflags vte`"
  <linkflags>"`pkg-config --libs vte`"
  ;

path-constant TOP : . ;

rule for-each ( rule : suffix ? : sources * : dependencies * : properties * ) {
  for local name in $(sources) {
    name_o = [ MATCH "^$(TOP)/(.+).cpp$" : $(name) ] ;
    if ! $(name_o) {
      name_o = [ MATCH "^$(TOP)/(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    if ! $(name_o) {
      name_o = [ MATCH "^(.+)$" : $(name) ] ;
      name_o = $(name_o)$(suffix) ;
    }
    objects += $(name_o) ;
    $(rule) $(name_o) : $(name) $(dependencies) : $(properties) ;
  }
  
  return $(objects) ;
}

lib anyterm : [ path.glob-tree $(TOP)/src/anyterm : *.cpp ] ;

exe anytermd : src/main.cpp anyterm ;

install anytermd_dist
    : anytermd [ for-each exe : : [ path.glob-tree $(TOP)/test : *.cpp ] : anyterm : <include>include/ ]
    : <location>./dist/ ;
